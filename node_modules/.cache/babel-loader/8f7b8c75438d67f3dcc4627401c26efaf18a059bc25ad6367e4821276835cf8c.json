{"ast":null,"code":"import 'webrtc-adapter';\nimport Hls from 'hls.js/dist/hls.light.min.js';\nimport './rtsp-to-web-player.css';\nexport default class RTSPtoWEBPlayer {\n  MSE = null;\n  MSEStreamingStarted = false;\n  MSESourceBuffer = null;\n  turn = [];\n  codec = null;\n  webSocket = null;\n  webrtc = null;\n  currentPlayerType = null;\n  hidden = \"hidden\";\n  paused = false;\n  options = {\n    parentElement: null,\n    source: null,\n    controls: true,\n    muted: true,\n    autoplay: true,\n    loop: false,\n    hlsjsconfig: {},\n    webrtcconfig: {\n      iceServers: [{\n        urls: [\"stun:stun.l.google.com:19302\"]\n      }],\n      sdpSemantics: \"unified-plan\",\n      bundlePolicy: \"max-compat\"\n      //iceTransportPolicy: \"relay\",//for option \"relay\" need use  turn server\n    },\n\n    debug: false\n  };\n  constructor(options) {\n    this.options = {\n      ...this.options,\n      ...options\n    };\n    this.createElements();\n    if (this.options.parentElement) {\n      this.attachTo(this.options.parentElement);\n    }\n    this.defDocumentHidden();\n  }\n  createElements = () => {\n    //video\n    this.video = document.createElement(\"video\");\n    this.video.setAttribute('playsinline', '');\n    this.options.controls ? this.video.setAttribute('controls', '') : 0;\n    this.options.muted ? this.video.setAttribute('muted', '') : 0;\n    this.options.autoplay ? this.video.setAttribute('autoplay', '') : 0;\n    this.options.loop ? this.video.setAttribute('loop', '') : 0;\n    this.addVideoListeners();\n    //wrapper\n    this.player = document.createElement(\"div\");\n    this.player.classList.add('RTSPtoWEBPlayer');\n    this.player.append(this.video);\n  };\n  attachTo = element => {\n    this.options.parentElement = element;\n    this.options.parentElement.innerHTML = \"\";\n    this.options.parentElement.append(this.player);\n    if (this.options.source) {\n      this.load(this.options.source);\n    }\n  };\n  load = source => {\n    this.options.source = source;\n    this.destroy();\n    const sourceType = new URL(this.options.source);\n    if (sourceType.protocol === 'http:' || sourceType.protocol === 'https:') {\n      if (this.options.source.indexOf('m3u8') !== -1) {\n        this.currentPlayerType = \"hls\";\n        this.hlsPlayer();\n      } else if (this.options.source.indexOf('.mp4') !== -1) {\n        this.currentPlayerType = \"mp4\";\n        this.mp4Player();\n      } else {\n        this.currentPlayerType = \"rtc\";\n        this.webRtcPlayer();\n      }\n    } else if (sourceType.protocol === 'ws:' || sourceType.protocol === 'wss:') {\n      this.currentPlayerType = \"ws\";\n      this.msePlayer();\n    } else {\n      this.currentPlayerType = null;\n    }\n  };\n  addMseListeners = () => {\n    this.MSE.addEventListener('sourceopen', this.sourceOpenHandler);\n  };\n  sourceOpenHandler = () => {\n    this.websocketEvents();\n  };\n  websocketEvents = () => {\n    this.webSocket = new WebSocket(this.options.source);\n    this.webSocket.binaryType = \"arraybuffer\";\n    this.webSocket.onclose = () => {\n      this.webSocket.onmessage = null;\n    };\n    this.webSocket.onmessage = _ref => {\n      let {\n        data\n      } = _ref;\n      if (this.codec === null) {\n        if (typeof data === \"object\") {\n          this.codec = new TextDecoder(\"utf-8\").decode(new Uint8Array(data).slice(1));\n        } else {\n          this.codec = data;\n        }\n        this.MSESourceBuffer = this.MSE.addSourceBuffer(`video/mp4; codecs=\"${this.codec}\"`);\n        this.MSESourceBuffer.mode = \"segments\";\n        this.MSESourceBuffer.addEventListener(\"updateend\", this.pushPacket);\n      } else {\n        if (!this.paused) {\n          this.readPacket(data);\n        }\n      }\n      if (document[this.hidden] && this.video.buffered.length) {\n        this.video.currentTime = this.video.buffered.end(this.video.buffered.length - 1) - 1;\n      }\n    };\n  };\n  readPacket = packet => {\n    if (!this.MSEStreamingStarted) {\n      try {\n        this.MSESourceBuffer.appendBuffer(packet);\n        this.MSEStreamingStarted = true;\n      } catch (e) {\n        console.log(e);\n      }\n      return;\n    }\n    this.turn.push(packet);\n    this.pushPacket();\n  };\n  pushPacket = () => {\n    if (!this.MSESourceBuffer.updating) {\n      if (this.turn.length > 0) {\n        const packet = this.turn.shift();\n        try {\n          this.MSESourceBuffer.appendBuffer(packet);\n        } catch (err) {\n          this.debugLogger(err);\n        }\n      } else {\n        this.MSEStreamingStarted = false;\n      }\n    }\n  };\n  mp4Player = () => {\n    this.video.src = this.options.source;\n  };\n  msePlayer = () => {\n    this.MSE = new MediaSource();\n    this.video.src = window.URL.createObjectURL(this.MSE);\n    this.addMseListeners();\n  };\n  hlsPlayer = () => {\n    if (this.video.canPlayType('application/vnd.apple.mpegurl')) {\n      this.video.src = this.options.source;\n    } else if (Hls.isSupported()) {\n      this.hls = new Hls(this.options.hlsjsconfig);\n      this.hls.loadSource(this.options.source);\n      this.hls.attachMedia(this.video);\n    } else {\n      console.warn('UNSUPPOERED MEDIA SOURCE');\n    }\n  };\n  webRtcPlayer = async () => {\n    this.mediaStream = new MediaStream();\n    this.video.srcObject = this.mediaStream;\n    this.webrtc = new RTCPeerConnection(this.options.webrtcconfig);\n    this.webrtc.onnegotiationneeded = this.handleNegotiationNeeded;\n    this.webrtc.onsignalingstatechange = this.signalingstatechange;\n    this.webrtc.onicegatheringstatechange = this.icegatheringstatechange;\n    this.webrtc.onicecandidate = this.icecandidate;\n    this.webrtc.onicecandidateerror = this.icecandidateerror;\n    this.webrtc.onconnectionstatechange = this.connectionstatechange;\n    this.webrtc.oniceconnectionstatechange = this.iceconnectionstatechange;\n    this.webrtc.ontrack = this.onTrack;\n    const offer = await this.webrtc.createOffer({\n      //iceRestart:true,\n      offerToReceiveAudio: true,\n      offerToReceiveVideo: true\n    });\n    await this.webrtc.setLocalDescription(offer);\n  };\n  handleNegotiationNeeded = async () => {\n    /*\r\n    * in this project this handler is not needed, but in another it can be useful\r\n    */\n    this.debugLogger('handleNegotiationNeeded');\n  };\n  signalingstatechange = async () => {\n    switch (this.webrtc.signalingState) {\n      case 'have-local-offer':\n        const suuid = new URL(this.options.source).pathname.split('/').slice(-1);\n        const formData = new FormData();\n        formData.append('data', btoa(this.webrtc.localDescription.sdp));\n        formData.append('suuid', suuid);\n        const response = await fetch(this.options.source, {\n          method: 'POST',\n          body: formData\n        });\n        if (response.ok) {\n          const remoteDescription = await response.text();\n          this.webrtc.setRemoteDescription(new RTCSessionDescription({\n            type: 'answer',\n            sdp: atob(remoteDescription)\n          }));\n        }\n        break;\n      case 'stable':\n        /*\r\n        * There is no ongoing exchange of offer and answer underway.\r\n        * This may mean that the RTCPeerConnection object is new, in which case both the localDescription and remoteDescription are null;\r\n        * it may also mean that negotiation is complete and a connection has been established.\r\n        */\n        break;\n      case 'closed':\n        /*\r\n         * The RTCPeerConnection has been closed.\r\n         */\n        this.destroy();\n        break;\n      default:\n        console.log(`unhandled signalingState is ${this.webrtc.signalingState}`);\n        break;\n    }\n  };\n  icegatheringstatechange = () => {\n    switch (this.webrtc.iceGatheringState) {\n      case \"gathering\":\n        /* collection of candidates has begun */\n        this.debugLogger('collection of candidates has begun');\n        break;\n      case \"complete\":\n        /* collection of candidates is finished */\n        this.debugLogger('collection of candidates is finished');\n        break;\n    }\n  };\n  icecandidate = event => {\n    if (!event.candidate) {\n      //send to signal\n      //let candidate=new RTCIceCandidate(event.candidate);\n    }\n  };\n  icecandidateerror = event => {\n    this.debugLogger('icecandidateerror\\n', `hostCandidate: ${event.hostCandidate} CODE: ${event.errorCode} TEXT: ${event.errorText}`);\n  };\n  connectionstatechange = () => {\n    switch (this.webrtc.connectionState) {\n      case \"new\":\n      case \"connected\":\n        this.debugLogger(\"connected\");\n        break;\n      case \"disconnected\":\n        this.debugLogger(\"disconnected...\");\n        break;\n      case \"closed\":\n        this.debugLogger(\"Offline\");\n        break;\n      case \"failed\":\n        this.debugLogger(\"Error\");\n        break;\n      default:\n        this.debugLogger(`Unhadled state: ${this.webrtc.connectionState}`);\n        break;\n    }\n  };\n  iceconnectionstatechange = () => {\n    this.debugLogger('iceconnectionstatechange\\n', this.webrtc.iceConnectionState);\n  };\n  onTrack = event => {\n    this.debugLogger('onTrack\\n', this.webrtc.iceConnectionState);\n    this.mediaStream.addTrack(event.track);\n  };\n  destroy = () => {\n    this.codec = null;\n    if (this.currentPlayerType != null) {\n      switch (this.currentPlayerType) {\n        case 'hls':\n          if (this.hls != null) {\n            this.hls.destroy();\n          }\n          break;\n        case 'rtc':\n          if (this.webrtc != null) {\n            this.webrtc.close();\n            this.webrtc = null;\n            this.video.srcObject = null;\n            this.mediaStream = null;\n          }\n          break;\n        case 'ws':\n          this.webSocket.onerror = null;\n          this.webSocket.onopen = null;\n          this.webSocket.onmessage = null;\n          this.webSocket.onclose = null;\n          this.webSocket.close(1000);\n          this.turn = [];\n          break;\n        default:\n      }\n      this.video.pause();\n      this.video.removeAttribute('src'); // empty source\n      this.video.load();\n    }\n  };\n  addVideoListeners = () => {\n    this.video.addEventListener('error', e => {\n      this.debugLogger('[ video listener ]', e);\n      this.destroy();\n    });\n    this.video.addEventListener('play', () => {\n      this.paused = false;\n    });\n    this.video.addEventListener('pause', () => {\n      this.paused = true;\n    }); //\n\n    this.video.addEventListener('progress', () => {\n      if (this.currentPlayerType === 'ws' && this.video.buffered.length > 0) {\n        if (this.video.currentTime < this.video.buffered.start(this.video.buffered.length - 1)) {\n          this.video.currentTime = this.video.buffered.end(this.video.buffered.length - 1) - 1;\n        }\n      }\n    });\n  };\n  defDocumentHidden() {\n    if (typeof document.hidden !== \"undefined\") {\n      this.hidden = \"hidden\";\n    } else if (typeof document.msHidden !== \"undefined\") {\n      this.hidden = \"msHidden\";\n    } else if (typeof document.webkitHidden !== \"undefined\") {\n      this.hidden = \"webkitHidden\";\n    }\n  }\n  getImageBase64 = () => {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = this.video.videoWidth;\n    canvas.height = this.video.videoHeight;\n    canvas.getContext('2d').drawImage(this.video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL();\n    canvas.remove();\n    return dataURL;\n  };\n  debugLogger = (() => {\n    var _this = this;\n    return function () {\n      if (_this.options.debug) {\n        if (_this.options.debug === 'trace') {\n          console.trace(...arguments);\n        } else {\n          console.log(...arguments);\n        }\n      }\n    };\n  })();\n}","map":{"version":3,"names":["Hls","RTSPtoWEBPlayer","MSE","MSEStreamingStarted","MSESourceBuffer","turn","codec","webSocket","webrtc","currentPlayerType","hidden","paused","options","parentElement","source","controls","muted","autoplay","loop","hlsjsconfig","webrtcconfig","iceServers","urls","sdpSemantics","bundlePolicy","debug","constructor","createElements","attachTo","defDocumentHidden","video","document","createElement","setAttribute","addVideoListeners","player","classList","add","append","element","innerHTML","load","destroy","sourceType","URL","protocol","indexOf","hlsPlayer","mp4Player","webRtcPlayer","msePlayer","addMseListeners","addEventListener","sourceOpenHandler","websocketEvents","WebSocket","binaryType","onclose","onmessage","data","TextDecoder","decode","Uint8Array","slice","addSourceBuffer","mode","pushPacket","readPacket","buffered","length","currentTime","end","packet","appendBuffer","e","console","log","push","updating","shift","err","debugLogger","src","MediaSource","window","createObjectURL","canPlayType","isSupported","hls","loadSource","attachMedia","warn","mediaStream","MediaStream","srcObject","RTCPeerConnection","onnegotiationneeded","handleNegotiationNeeded","onsignalingstatechange","signalingstatechange","onicegatheringstatechange","icegatheringstatechange","onicecandidate","icecandidate","onicecandidateerror","icecandidateerror","onconnectionstatechange","connectionstatechange","oniceconnectionstatechange","iceconnectionstatechange","ontrack","onTrack","offer","createOffer","offerToReceiveAudio","offerToReceiveVideo","setLocalDescription","signalingState","suuid","pathname","split","formData","FormData","btoa","localDescription","sdp","response","fetch","method","body","ok","remoteDescription","text","setRemoteDescription","RTCSessionDescription","type","atob","iceGatheringState","event","candidate","hostCandidate","errorCode","errorText","connectionState","iceConnectionState","addTrack","track","close","onerror","onopen","pause","removeAttribute","start","msHidden","webkitHidden","getImageBase64","canvas","width","videoWidth","height","videoHeight","getContext","drawImage","dataURL","toDataURL","remove","trace"],"sources":["C:/Users/cnsi-3f-1/Desktop/React/rtsp_to_web/node_modules/rtsptowebplayer/src/rtsp-to-web-player.js"],"sourcesContent":["import 'webrtc-adapter';\r\nimport Hls from 'hls.js/dist/hls.light.min.js';\r\nimport './rtsp-to-web-player.css';\r\n\r\nexport default class RTSPtoWEBPlayer{\r\n\r\n    MSE=null;\r\n    MSEStreamingStarted=false;\r\n    MSESourceBuffer=null;\r\n    turn=[];\r\n    codec=null;\r\n    webSocket=null;\r\n    webrtc=null;\r\n    currentPlayerType=null;\r\n    hidden = \"hidden\";\r\n    paused=false;\r\n    options={\r\n        parentElement:null,\r\n        source:null,\r\n        controls:true,\r\n        muted:true,\r\n        autoplay:true,\r\n        loop:false,\r\n        hlsjsconfig: {\r\n\r\n        },\r\n        webrtcconfig:{\r\n            iceServers: [\r\n                {urls: [\"stun:stun.l.google.com:19302\"]}\r\n                ],\r\n            sdpSemantics: \"unified-plan\",\r\n            bundlePolicy: \"max-compat\",\r\n            //iceTransportPolicy: \"relay\",//for option \"relay\" need use  turn server\r\n        },\r\n        debug:false\r\n    }\r\n\r\n    constructor(options) {\r\n        this.options={...this.options,...options};\r\n        this.createElements();\r\n        if(this.options.parentElement){\r\n            this.attachTo(this.options.parentElement);\r\n        }\r\n        this.defDocumentHidden();\r\n    }\r\n\r\n    createElements = ()=>{\r\n        //video\r\n        this.video=document.createElement(\"video\");\r\n        this.video.setAttribute('playsinline','')\r\n        this.options.controls ? this.video.setAttribute('controls','') :0;\r\n        this.options.muted ? this.video.setAttribute('muted',''):0;\r\n        this.options.autoplay ? this.video.setAttribute('autoplay',''):0;\r\n        this.options.loop ? this.video.setAttribute('loop',''):0;\r\n        this.addVideoListeners();\r\n        //wrapper\r\n        this.player=document.createElement(\"div\");\r\n        this.player.classList.add('RTSPtoWEBPlayer');\r\n        this.player.append(this.video);\r\n    }\r\n\r\n    attachTo=(element)=>{\r\n        this.options.parentElement=element\r\n        this.options.parentElement.innerHTML=\"\";\r\n        this.options.parentElement.append(this.player);\r\n        if(this.options.source){\r\n            this.load(this.options.source);\r\n        }\r\n    }\r\n\r\n    load = (source)=>{\r\n        this.options.source=source;\r\n        this.destroy();\r\n        const sourceType = new URL(this.options.source);\r\n        if (sourceType.protocol === 'http:' || sourceType.protocol === 'https:') {\r\n            if (this.options.source.indexOf('m3u8') !== -1) {\r\n                this.currentPlayerType = \"hls\";\r\n                this.hlsPlayer();\r\n            }else if(this.options.source.indexOf('.mp4') !== -1){\r\n                this.currentPlayerType = \"mp4\";\r\n                this.mp4Player();\r\n            } else {\r\n                this.currentPlayerType = \"rtc\";\r\n                this.webRtcPlayer();\r\n            }\r\n        } else if (sourceType.protocol === 'ws:' || sourceType.protocol === 'wss:') {\r\n            this.currentPlayerType = \"ws\";\r\n            this.msePlayer();\r\n        } else {\r\n            this.currentPlayerType = null;\r\n        }\r\n\r\n    }\r\n\r\n    addMseListeners = () => {\r\n        this.MSE.addEventListener('sourceopen', this.sourceOpenHandler);\r\n    }\r\n\r\n    sourceOpenHandler=()=>{\r\n        this.websocketEvents();\r\n    }\r\n\r\n    websocketEvents=()=>{\r\n        this.webSocket = new WebSocket(this.options.source);\r\n        this.webSocket.binaryType = \"arraybuffer\";\r\n        this.webSocket.onclose = () => {\r\n            this.webSocket.onmessage=null;\r\n        }\r\n        this.webSocket.onmessage =  ({data}) => {\r\n            if(this.codec===null){\r\n                if(typeof (data)===\"object\"){\r\n                    this.codec=new TextDecoder(\"utf-8\").decode((new Uint8Array(data)).slice(1));\r\n                }else{\r\n                    this.codec=data;\r\n                }\r\n                this.MSESourceBuffer = this.MSE.addSourceBuffer(`video/mp4; codecs=\"${this.codec}\"`);\r\n                this.MSESourceBuffer.mode = \"segments\";\r\n                this.MSESourceBuffer.addEventListener(\"updateend\", this.pushPacket);\r\n            }else{\r\n                if(!this.paused){\r\n                    this.readPacket(data);\r\n                }\r\n            }\r\n            if (document[this.hidden] && this.video.buffered.length) {\r\n                this.video.currentTime = this.video.buffered.end((this.video.buffered.length - 1)) - 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    readPacket = (packet)=>{\r\n        if (!this.MSEStreamingStarted) {\r\n            try {\r\n                this.MSESourceBuffer.appendBuffer(packet);\r\n                this.MSEStreamingStarted = true;\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n            return;\r\n        }\r\n        this.turn.push(packet);\r\n        this.pushPacket();\r\n    }\r\n\r\n    pushPacket = () => {\r\n        if (!this.MSESourceBuffer.updating) {\r\n            if (this.turn.length > 0) {\r\n                const packet = this.turn.shift();\r\n                try {\r\n                    this.MSESourceBuffer.appendBuffer(packet)\r\n                } catch (err) {\r\n                    this.debugLogger(err);\r\n                }\r\n            } else {\r\n                this.MSEStreamingStarted = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    mp4Player=()=>{\r\n        this.video.src=this.options.source;\r\n    }\r\n\r\n    msePlayer =()=>{\r\n        this.MSE = new MediaSource();\r\n        this.video.src = window.URL.createObjectURL(this.MSE);\r\n        this.addMseListeners();\r\n    }\r\n\r\n    hlsPlayer = ()=>{\r\n        if (this.video.canPlayType('application/vnd.apple.mpegurl')) {\r\n            this.video.src = this.options.source;\r\n        } else if (Hls.isSupported()) {\r\n            this.hls = new Hls(this.options.hlsjsconfig);\r\n            this.hls.loadSource(this.options.source);\r\n            this.hls.attachMedia(this.video);\r\n        }else{\r\n            console.warn('UNSUPPOERED MEDIA SOURCE');\r\n        }\r\n    }\r\n\r\n    webRtcPlayer= async ()=>{\r\n        this.mediaStream = new MediaStream();\r\n        this.video.srcObject = this.mediaStream;\r\n        this.webrtc = new RTCPeerConnection(this.options.webrtcconfig);\r\n        this.webrtc.onnegotiationneeded         =this.handleNegotiationNeeded;\r\n        this.webrtc.onsignalingstatechange      =this.signalingstatechange;\r\n        this.webrtc.onicegatheringstatechange   =this.icegatheringstatechange;\r\n        this.webrtc.onicecandidate              =this.icecandidate;\r\n        this.webrtc.onicecandidateerror         =this.icecandidateerror;\r\n        this.webrtc.onconnectionstatechange     =this.connectionstatechange;\r\n        this.webrtc.oniceconnectionstatechange  =this.iceconnectionstatechange;\r\n        this.webrtc.ontrack = this.onTrack;\r\n\r\n        const offer = await this.webrtc.createOffer({\r\n            //iceRestart:true,\r\n            offerToReceiveAudio:true,\r\n            offerToReceiveVideo:true\r\n        });\r\n        await this.webrtc.setLocalDescription(offer);\r\n    }\r\n\r\n    handleNegotiationNeeded = async ()=>{\r\n        /*\r\n        * in this project this handler is not needed, but in another it can be useful\r\n        */\r\n        this.debugLogger('handleNegotiationNeeded')\r\n    }\r\n\r\n    signalingstatechange = async ()=>{\r\n        switch (this.webrtc.signalingState){\r\n            case 'have-local-offer':\r\n                const suuid=((new URL(this.options.source)).pathname).split('/').slice(-1);\r\n                const formData = new FormData();\r\n                formData.append('data', btoa(this.webrtc.localDescription.sdp));\r\n                formData.append('suuid',suuid);\r\n                const response=await  fetch(this.options.source, {\r\n                    method: 'POST',\r\n                    body: formData\r\n                });\r\n                if(response.ok){\r\n                    const remoteDescription=await response.text();\r\n                    this.webrtc.setRemoteDescription(new RTCSessionDescription({\r\n                        type: 'answer',\r\n                        sdp: atob(remoteDescription)\r\n                    }))\r\n                }\r\n                break;\r\n            case 'stable':\r\n                /*\r\n                * There is no ongoing exchange of offer and answer underway.\r\n                * This may mean that the RTCPeerConnection object is new, in which case both the localDescription and remoteDescription are null;\r\n                * it may also mean that negotiation is complete and a connection has been established.\r\n                */\r\n                break;\r\n\r\n            case 'closed':\r\n                /*\r\n                 * The RTCPeerConnection has been closed.\r\n                 */\r\n                this.destroy();\r\n                break;\r\n\r\n            default:\r\n                console.log(`unhandled signalingState is ${this.webrtc.signalingState}`);\r\n                break;\r\n        }\r\n    }\r\n\r\n    icegatheringstatechange =()=>{\r\n        switch(this.webrtc.iceGatheringState) {\r\n            case \"gathering\":\r\n                /* collection of candidates has begun */\r\n                this.debugLogger('collection of candidates has begun');\r\n                break;\r\n            case \"complete\":\r\n                /* collection of candidates is finished */\r\n                this.debugLogger('collection of candidates is finished');\r\n                break;\r\n        }\r\n    }\r\n\r\n    icecandidate = (event)=>{\r\n        if(!event.candidate){\r\n            //send to signal\r\n            //let candidate=new RTCIceCandidate(event.candidate);\r\n        }\r\n    }\r\n\r\n    icecandidateerror=(event)=>{\r\n        this.debugLogger('icecandidateerror\\n',`hostCandidate: ${event.hostCandidate} CODE: ${event.errorCode} TEXT: ${event.errorText}`);\r\n    }\r\n\r\n    connectionstatechange=()=>{\r\n        switch(this.webrtc.connectionState) {\r\n            case \"new\":\r\n            case \"connected\":\r\n                this.debugLogger(\"connected\");\r\n                break;\r\n            case \"disconnected\":\r\n                this.debugLogger(\"disconnected...\");\r\n                break;\r\n            case \"closed\":\r\n                this.debugLogger(\"Offline\");\r\n                break;\r\n            case \"failed\":\r\n                this.debugLogger(\"Error\");\r\n                break;\r\n            default:\r\n                this.debugLogger(`Unhadled state: ${this.webrtc.connectionState}`);\r\n                break;\r\n        }\r\n    }\r\n    iceconnectionstatechange=()=>{\r\n        this.debugLogger('iceconnectionstatechange\\n',this.webrtc.iceConnectionState);\r\n    }\r\n\r\n    onTrack=(event)=>{\r\n        this.debugLogger('onTrack\\n',this.webrtc.iceConnectionState);\r\n        this.mediaStream.addTrack(event.track);\r\n    }\r\n\r\n    destroy=()=>{\r\n        this.codec=null;\r\n        if (this.currentPlayerType != null) {\r\n            switch (this.currentPlayerType) {\r\n                case 'hls':\r\n                    if (this.hls != null) {\r\n                        this.hls.destroy();\r\n                    }\r\n                    break;\r\n\r\n                case 'rtc':\r\n                    if (this.webrtc != null) {\r\n                        this.webrtc.close();\r\n                        this.webrtc = null;\r\n                        this.video.srcObject = null;\r\n                        this.mediaStream = null;\r\n                    }\r\n                    break;\r\n\r\n                case 'ws':\r\n                    this.webSocket.onerror = null;\r\n                    this.webSocket.onopen = null;\r\n                    this.webSocket.onmessage = null;\r\n                    this.webSocket.onclose = null;\r\n                    this.webSocket.close(1000);\r\n                    this.turn=[];\r\n                    break;\r\n                default:\r\n            }\r\n            this.video.pause();\r\n            this.video.removeAttribute('src'); // empty source\r\n            this.video.load();\r\n        }\r\n    }\r\n\r\n    addVideoListeners=()=>{\r\n\r\n        this.video.addEventListener('error', (e) => {\r\n            this.debugLogger('[ video listener ]',e)\r\n            this.destroy();\r\n        });\r\n\r\n        this.video.addEventListener('play', () => {\r\n            this.paused=false\r\n        });\r\n\r\n        this.video.addEventListener('pause', () => {\r\n            this.paused=true;\r\n        });//\r\n\r\n        this.video.addEventListener('progress', () => {\r\n            if(this.currentPlayerType === 'ws' && this.video.buffered.length>0){\r\n                if(this.video.currentTime<this.video.buffered.start(this.video.buffered.length-1)){\r\n                    this.video.currentTime=this.video.buffered.end(this.video.buffered.length-1)-1;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    defDocumentHidden() {\r\n        if (typeof document.hidden !== \"undefined\") {\r\n            this.hidden = \"hidden\";\r\n        } else if (typeof document.msHidden !== \"undefined\") {\r\n            this.hidden = \"msHidden\";\r\n        } else if (typeof document.webkitHidden !== \"undefined\") {\r\n            this.hidden = \"webkitHidden\";\r\n        }\r\n    }\r\n\r\n    getImageBase64 = ()=>{\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = this.video.videoWidth;\r\n        canvas.height = this.video.videoHeight;\r\n        canvas.getContext('2d').drawImage(this.video, 0, 0, canvas.width, canvas.height);\r\n        const dataURL = canvas.toDataURL();\r\n        canvas.remove();\r\n        return dataURL;\r\n    }\r\n\r\n    debugLogger=(...arg)=>{\r\n        if(this.options.debug){\r\n            if(this.options.debug==='trace'){\r\n                console.trace(...arg)\r\n            }else{\r\n                console.log(...arg)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}