{"ast":null,"code":"/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function () {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function (blob) {\n  return blob.trim().split('\\n').map(function (line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function (blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function (part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function (blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function (blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function (blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function (line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function (line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n  var candidate = {\n    foundation: parts[0],\n    component: {\n      1: 'rtp',\n      2: 'rtcp'\n    }[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4],\n    // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default:\n        // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function (candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  var component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress && candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function (line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function (line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function (codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate + (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function (line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function (headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== 'sendrecv' ? '/' + headerExtension.direction : '') + ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function (line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function (codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function (param) {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function (line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function (codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function (fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') + '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function (line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function (line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function (ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function (mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function (line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(),\n    // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase() // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function (mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function (params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function (fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function (line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3)\n  };\n};\nSDPUtils.writeCryptoLine = function (parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' + parameters.cryptoSuite + ' ' + (typeof parameters.keyParams === 'object' ? SDPUtils.writeCryptoKeyParams(parameters.keyParams) : parameters.keyParams) + (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') + '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function (keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined\n  };\n};\nSDPUtils.writeCryptoKeyParams = function (keyParams) {\n  return keyParams.keyMethod + ':' + keyParams.keySalt + (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') + (keyParams.mkiValue && keyParams.mkiLength ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function (mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function (mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10)\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function (params) {\n  var sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' + 'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function (mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) {\n    // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:' + pt + ' ').map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default:\n          // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function (line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function (kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function (codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function (codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function (codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function (extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function (mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {\n    return SDPUtils.parseSsrcMedia(line);\n  }).filter(function (parts) {\n    return parts.attribute === 'cname';\n  });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID').map(function (line) {\n    var parts = line.substr(17).split(' ');\n    return parts.map(function (part) {\n      return parseInt(part, 10);\n    });\n  });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n  description.codecs.forEach(function (codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {\n          ssrc: secondarySsrc\n        };\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95 - 50 * 40 * 8;\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function (params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function (mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {\n    return SDPUtils.parseSsrcMedia(line);\n  }).filter(function (obj) {\n    return obj.attribute === 'cname';\n  })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n  return rtcpParameters;\n};\nSDPUtils.writeRtcpParameters = function (rtcpParameters) {\n  var sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc + ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function (mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {\n      stream: parts[0],\n      track: parts[1]\n    };\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(function (line) {\n    return SDPUtils.parseSsrcMedia(line);\n  }).filter(function (msidParts) {\n    return msidParts.attribute === 'msid';\n  });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {\n      stream: parts[0],\n      track: parts[1]\n    };\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function (mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    var parts = sctpMapLines[0].substr(10).split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function (media, sctp) {\n  var output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n', 'c=IN IP4 0.0.0.0\\r\\n', 'a=sctp-port:' + sctp.port + '\\r\\n'];\n  } else {\n    output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n', 'c=IN IP4 0.0.0.0\\r\\n', 'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function () {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function (sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' + 'o=' + user + ' ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\\r\\n' + 's=-\\r\\n' + 't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function (mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n      // FIXME: What should happen here?\n    }\n  }\n\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\nSDPUtils.getKind = function (mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\nSDPUtils.isRejected = function (mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\nSDPUtils.parseMLine = function (mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\nSDPUtils.parseOLine = function (mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function (blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}","map":{"version":3,"names":["SDPUtils","generateIdentifier","Math","random","toString","substr","localCName","splitLines","blob","trim","split","map","line","splitSections","parts","part","index","getDescription","sections","getMediaSections","shift","matchPrefix","prefix","filter","indexOf","parseCandidate","substring","candidate","foundation","component","protocol","toLowerCase","priority","parseInt","ip","address","port","type","i","length","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","undefined","writeCandidate","sdp","push","toUpperCase","join","parseIceOptions","parseRtpMap","parsed","payloadType","name","clockRate","channels","numChannels","writeRtpMap","codec","pt","preferredPayloadType","parseExtmap","id","direction","uri","writeExtmap","headerExtension","preferredId","parseFmtp","kv","j","writeFmtp","parameters","Object","keys","params","forEach","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","ssrc","colon","attribute","value","parseSsrcGroup","semantics","ssrcs","getMid","mediaSection","mid","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","tag","cryptoSuite","keyParams","sessionParams","slice","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","kind","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","primarySsrc","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","JSON","parse","stringify","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","obj","cname","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","stream","track","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","maxMessageSize","isNaN","sctpPort","fmt","sctpMapLines","writeSctpDescription","media","sctp","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","version","user","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","charAt","module","exports"],"sources":["C:/Users/cnsi-3f-1/Desktop/React/rtsp_to_web/node_modules/sdp/sdp.js"],"sourcesContent":["/* eslint-env node */\r\n'use strict';\r\n\r\n// SDP helpers.\r\nconst SDPUtils = {};\r\n\r\n// Generate an alphanumeric identifier for cname or mids.\r\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\r\nSDPUtils.generateIdentifier = function() {\r\n  return Math.random().toString(36).substr(2, 10);\r\n};\r\n\r\n// The RTCP CNAME used by all peerconnections from the same JS.\r\nSDPUtils.localCName = SDPUtils.generateIdentifier();\r\n\r\n// Splits SDP into lines, dealing with both CRLF and LF.\r\nSDPUtils.splitLines = function(blob) {\r\n  return blob.trim().split('\\n').map(line => line.trim());\r\n};\r\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\r\nSDPUtils.splitSections = function(blob) {\r\n  const parts = blob.split('\\nm=');\r\n  return parts.map((part, index) => (index > 0 ?\r\n    'm=' + part : part).trim() + '\\r\\n');\r\n};\r\n\r\n// Returns the session description.\r\nSDPUtils.getDescription = function(blob) {\r\n  const sections = SDPUtils.splitSections(blob);\r\n  return sections && sections[0];\r\n};\r\n\r\n// Returns the individual media sections.\r\nSDPUtils.getMediaSections = function(blob) {\r\n  const sections = SDPUtils.splitSections(blob);\r\n  sections.shift();\r\n  return sections;\r\n};\r\n\r\n// Returns lines that start with a certain prefix.\r\nSDPUtils.matchPrefix = function(blob, prefix) {\r\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\r\n};\r\n\r\n// Parses an ICE candidate line. Sample input:\r\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\r\n// rport 55996\"\r\n// Input can be prefixed with a=.\r\nSDPUtils.parseCandidate = function(line) {\r\n  let parts;\r\n  // Parse both variants.\r\n  if (line.indexOf('a=candidate:') === 0) {\r\n    parts = line.substring(12).split(' ');\r\n  } else {\r\n    parts = line.substring(10).split(' ');\r\n  }\r\n\r\n  const candidate = {\r\n    foundation: parts[0],\r\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\r\n    protocol: parts[2].toLowerCase(),\r\n    priority: parseInt(parts[3], 10),\r\n    ip: parts[4],\r\n    address: parts[4], // address is an alias for ip.\r\n    port: parseInt(parts[5], 10),\r\n    // skip parts[6] == 'typ'\r\n    type: parts[7],\r\n  };\r\n\r\n  for (let i = 8; i < parts.length; i += 2) {\r\n    switch (parts[i]) {\r\n      case 'raddr':\r\n        candidate.relatedAddress = parts[i + 1];\r\n        break;\r\n      case 'rport':\r\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\r\n        break;\r\n      case 'tcptype':\r\n        candidate.tcpType = parts[i + 1];\r\n        break;\r\n      case 'ufrag':\r\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\r\n        candidate.usernameFragment = parts[i + 1];\r\n        break;\r\n      default: // extension handling, in particular ufrag. Don't overwrite.\r\n        if (candidate[parts[i]] === undefined) {\r\n          candidate[parts[i]] = parts[i + 1];\r\n        }\r\n        break;\r\n    }\r\n  }\r\n  return candidate;\r\n};\r\n\r\n// Translates a candidate object into SDP candidate attribute.\r\n// This does not include the a= prefix!\r\nSDPUtils.writeCandidate = function(candidate) {\r\n  const sdp = [];\r\n  sdp.push(candidate.foundation);\r\n\r\n  const component = candidate.component;\r\n  if (component === 'rtp') {\r\n    sdp.push(1);\r\n  } else if (component === 'rtcp') {\r\n    sdp.push(2);\r\n  } else {\r\n    sdp.push(component);\r\n  }\r\n  sdp.push(candidate.protocol.toUpperCase());\r\n  sdp.push(candidate.priority);\r\n  sdp.push(candidate.address || candidate.ip);\r\n  sdp.push(candidate.port);\r\n\r\n  const type = candidate.type;\r\n  sdp.push('typ');\r\n  sdp.push(type);\r\n  if (type !== 'host' && candidate.relatedAddress &&\r\n      candidate.relatedPort) {\r\n    sdp.push('raddr');\r\n    sdp.push(candidate.relatedAddress);\r\n    sdp.push('rport');\r\n    sdp.push(candidate.relatedPort);\r\n  }\r\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\r\n    sdp.push('tcptype');\r\n    sdp.push(candidate.tcpType);\r\n  }\r\n  if (candidate.usernameFragment || candidate.ufrag) {\r\n    sdp.push('ufrag');\r\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\r\n  }\r\n  return 'candidate:' + sdp.join(' ');\r\n};\r\n\r\n// Parses an ice-options line, returns an array of option tags.\r\n// Sample input:\r\n// a=ice-options:foo bar\r\nSDPUtils.parseIceOptions = function(line) {\r\n  return line.substr(14).split(' ');\r\n};\r\n\r\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\r\n// a=rtpmap:111 opus/48000/2\r\nSDPUtils.parseRtpMap = function(line) {\r\n  let parts = line.substr(9).split(' ');\r\n  const parsed = {\r\n    payloadType: parseInt(parts.shift(), 10), // was: id\r\n  };\r\n\r\n  parts = parts[0].split('/');\r\n\r\n  parsed.name = parts[0];\r\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\r\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\r\n  // legacy alias, got renamed back to channels in ORTC.\r\n  parsed.numChannels = parsed.channels;\r\n  return parsed;\r\n};\r\n\r\n// Generates a rtpmap line from RTCRtpCodecCapability or\r\n// RTCRtpCodecParameters.\r\nSDPUtils.writeRtpMap = function(codec) {\r\n  let pt = codec.payloadType;\r\n  if (codec.preferredPayloadType !== undefined) {\r\n    pt = codec.preferredPayloadType;\r\n  }\r\n  const channels = codec.channels || codec.numChannels || 1;\r\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\r\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\r\n};\r\n\r\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\r\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\r\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\r\nSDPUtils.parseExtmap = function(line) {\r\n  const parts = line.substr(9).split(' ');\r\n  return {\r\n    id: parseInt(parts[0], 10),\r\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\r\n    uri: parts[1],\r\n  };\r\n};\r\n\r\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\r\n// RTCRtpHeaderExtension.\r\nSDPUtils.writeExtmap = function(headerExtension) {\r\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\r\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\r\n        ? '/' + headerExtension.direction\r\n        : '') +\r\n      ' ' + headerExtension.uri + '\\r\\n';\r\n};\r\n\r\n// Parses a fmtp line, returns dictionary. Sample input:\r\n// a=fmtp:96 vbr=on;cng=on\r\n// Also deals with vbr=on; cng=on\r\nSDPUtils.parseFmtp = function(line) {\r\n  const parsed = {};\r\n  let kv;\r\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\r\n  for (let j = 0; j < parts.length; j++) {\r\n    kv = parts[j].trim().split('=');\r\n    parsed[kv[0].trim()] = kv[1];\r\n  }\r\n  return parsed;\r\n};\r\n\r\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\r\nSDPUtils.writeFmtp = function(codec) {\r\n  let line = '';\r\n  let pt = codec.payloadType;\r\n  if (codec.preferredPayloadType !== undefined) {\r\n    pt = codec.preferredPayloadType;\r\n  }\r\n  if (codec.parameters && Object.keys(codec.parameters).length) {\r\n    const params = [];\r\n    Object.keys(codec.parameters).forEach(param => {\r\n      if (codec.parameters[param] !== undefined) {\r\n        params.push(param + '=' + codec.parameters[param]);\r\n      } else {\r\n        params.push(param);\r\n      }\r\n    });\r\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\r\n  }\r\n  return line;\r\n};\r\n\r\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\r\n// a=rtcp-fb:98 nack rpsi\r\nSDPUtils.parseRtcpFb = function(line) {\r\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\r\n  return {\r\n    type: parts.shift(),\r\n    parameter: parts.join(' '),\r\n  };\r\n};\r\n\r\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\r\nSDPUtils.writeRtcpFb = function(codec) {\r\n  let lines = '';\r\n  let pt = codec.payloadType;\r\n  if (codec.preferredPayloadType !== undefined) {\r\n    pt = codec.preferredPayloadType;\r\n  }\r\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\r\n    // FIXME: special handling for trr-int?\r\n    codec.rtcpFeedback.forEach(fb => {\r\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\r\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\r\n          '\\r\\n';\r\n    });\r\n  }\r\n  return lines;\r\n};\r\n\r\n// Parses a RFC 5576 ssrc media attribute. Sample input:\r\n// a=ssrc:3735928559 cname:something\r\nSDPUtils.parseSsrcMedia = function(line) {\r\n  const sp = line.indexOf(' ');\r\n  const parts = {\r\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\r\n  };\r\n  const colon = line.indexOf(':', sp);\r\n  if (colon > -1) {\r\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\r\n    parts.value = line.substr(colon + 1);\r\n  } else {\r\n    parts.attribute = line.substr(sp + 1);\r\n  }\r\n  return parts;\r\n};\r\n\r\n// Parse a ssrc-group line (see RFC 5576). Sample input:\r\n// a=ssrc-group:semantics 12 34\r\nSDPUtils.parseSsrcGroup = function(line) {\r\n  const parts = line.substr(13).split(' ');\r\n  return {\r\n    semantics: parts.shift(),\r\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\r\n  };\r\n};\r\n\r\n// Extracts the MID (RFC 5888) from a media section.\r\n// Returns the MID or undefined if no mid line was found.\r\nSDPUtils.getMid = function(mediaSection) {\r\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\r\n  if (mid) {\r\n    return mid.substr(6);\r\n  }\r\n};\r\n\r\n// Parses a fingerprint line for DTLS-SRTP.\r\nSDPUtils.parseFingerprint = function(line) {\r\n  const parts = line.substr(14).split(' ');\r\n  return {\r\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\r\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\r\n  };\r\n};\r\n\r\n// Extracts DTLS parameters from SDP media section or sessionpart.\r\n// FIXME: for consistency with other functions this should only\r\n//   get the fingerprint line as input. See also getIceParameters.\r\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\r\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=fingerprint:');\r\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\r\n  return {\r\n    role: 'auto',\r\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\r\n  };\r\n};\r\n\r\n// Serializes DTLS parameters to SDP.\r\nSDPUtils.writeDtlsParameters = function(params, setupType) {\r\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\r\n  params.fingerprints.forEach(fp => {\r\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\r\n  });\r\n  return sdp;\r\n};\r\n\r\n// Parses a=crypto lines into\r\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\r\nSDPUtils.parseCryptoLine = function(line) {\r\n  const parts = line.substr(9).split(' ');\r\n  return {\r\n    tag: parseInt(parts[0], 10),\r\n    cryptoSuite: parts[1],\r\n    keyParams: parts[2],\r\n    sessionParams: parts.slice(3),\r\n  };\r\n};\r\n\r\nSDPUtils.writeCryptoLine = function(parameters) {\r\n  return 'a=crypto:' + parameters.tag + ' ' +\r\n    parameters.cryptoSuite + ' ' +\r\n    (typeof parameters.keyParams === 'object'\r\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\r\n      : parameters.keyParams) +\r\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\r\n    '\\r\\n';\r\n};\r\n\r\n// Parses the crypto key parameters into\r\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\r\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\r\n  if (keyParams.indexOf('inline:') !== 0) {\r\n    return null;\r\n  }\r\n  const parts = keyParams.substr(7).split('|');\r\n  return {\r\n    keyMethod: 'inline',\r\n    keySalt: parts[0],\r\n    lifeTime: parts[1],\r\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\r\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\r\n  };\r\n};\r\n\r\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\r\n  return keyParams.keyMethod + ':'\r\n    + keyParams.keySalt +\r\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\r\n    (keyParams.mkiValue && keyParams.mkiLength\r\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\r\n      : '');\r\n};\r\n\r\n// Extracts all SDES parameters.\r\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\r\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=crypto:');\r\n  return lines.map(SDPUtils.parseCryptoLine);\r\n};\r\n\r\n// Parses ICE information from SDP media section or sessionpart.\r\n// FIXME: for consistency with other functions this should only\r\n//   get the ice-ufrag and ice-pwd lines as input.\r\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\r\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=ice-ufrag:')[0];\r\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=ice-pwd:')[0];\r\n  if (!(ufrag && pwd)) {\r\n    return null;\r\n  }\r\n  return {\r\n    usernameFragment: ufrag.substr(12),\r\n    password: pwd.substr(10),\r\n  };\r\n};\r\n\r\n// Serializes ICE parameters to SDP.\r\nSDPUtils.writeIceParameters = function(params) {\r\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\r\n      'a=ice-pwd:' + params.password + '\\r\\n';\r\n  if (params.iceLite) {\r\n    sdp += 'a=ice-lite\\r\\n';\r\n  }\r\n  return sdp;\r\n};\r\n\r\n// Parses the SDP media section and returns RTCRtpParameters.\r\nSDPUtils.parseRtpParameters = function(mediaSection) {\r\n  const description = {\r\n    codecs: [],\r\n    headerExtensions: [],\r\n    fecMechanisms: [],\r\n    rtcp: [],\r\n  };\r\n  const lines = SDPUtils.splitLines(mediaSection);\r\n  const mline = lines[0].split(' ');\r\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\r\n    const pt = mline[i];\r\n    const rtpmapline = SDPUtils.matchPrefix(\r\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\r\n    if (rtpmapline) {\r\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\r\n      const fmtps = SDPUtils.matchPrefix(\r\n        mediaSection, 'a=fmtp:' + pt + ' ');\r\n      // Only the first a=fmtp:<pt> is considered.\r\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\r\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\r\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\r\n        .map(SDPUtils.parseRtcpFb);\r\n      description.codecs.push(codec);\r\n      // parse FEC mechanisms from rtpmap lines.\r\n      switch (codec.name.toUpperCase()) {\r\n        case 'RED':\r\n        case 'ULPFEC':\r\n          description.fecMechanisms.push(codec.name.toUpperCase());\r\n          break;\r\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\r\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\r\n  });\r\n  // FIXME: parse rtcp.\r\n  return description;\r\n};\r\n\r\n// Generates parts of the SDP media section describing the capabilities /\r\n// parameters.\r\nSDPUtils.writeRtpDescription = function(kind, caps) {\r\n  let sdp = '';\r\n\r\n  // Build the mline.\r\n  sdp += 'm=' + kind + ' ';\r\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\r\n  sdp += ' UDP/TLS/RTP/SAVPF ';\r\n  sdp += caps.codecs.map(codec => {\r\n    if (codec.preferredPayloadType !== undefined) {\r\n      return codec.preferredPayloadType;\r\n    }\r\n    return codec.payloadType;\r\n  }).join(' ') + '\\r\\n';\r\n\r\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\r\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\r\n\r\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\r\n  caps.codecs.forEach(codec => {\r\n    sdp += SDPUtils.writeRtpMap(codec);\r\n    sdp += SDPUtils.writeFmtp(codec);\r\n    sdp += SDPUtils.writeRtcpFb(codec);\r\n  });\r\n  let maxptime = 0;\r\n  caps.codecs.forEach(codec => {\r\n    if (codec.maxptime > maxptime) {\r\n      maxptime = codec.maxptime;\r\n    }\r\n  });\r\n  if (maxptime > 0) {\r\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\r\n  }\r\n\r\n  if (caps.headerExtensions) {\r\n    caps.headerExtensions.forEach(extension => {\r\n      sdp += SDPUtils.writeExtmap(extension);\r\n    });\r\n  }\r\n  // FIXME: write fecMechanisms.\r\n  return sdp;\r\n};\r\n\r\n// Parses the SDP media section and returns an array of\r\n// RTCRtpEncodingParameters.\r\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\r\n  const encodingParameters = [];\r\n  const description = SDPUtils.parseRtpParameters(mediaSection);\r\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\r\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\r\n\r\n  // filter a=ssrc:... cname:, ignore PlanB-msid\r\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\r\n    .map(line => SDPUtils.parseSsrcMedia(line))\r\n    .filter(parts => parts.attribute === 'cname');\r\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\r\n  let secondarySsrc;\r\n\r\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\r\n    .map(line => {\r\n      const parts = line.substr(17).split(' ');\r\n      return parts.map(part => parseInt(part, 10));\r\n    });\r\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\r\n    secondarySsrc = flows[0][1];\r\n  }\r\n\r\n  description.codecs.forEach(codec => {\r\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\r\n      let encParam = {\r\n        ssrc: primarySsrc,\r\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\r\n      };\r\n      if (primarySsrc && secondarySsrc) {\r\n        encParam.rtx = {ssrc: secondarySsrc};\r\n      }\r\n      encodingParameters.push(encParam);\r\n      if (hasRed) {\r\n        encParam = JSON.parse(JSON.stringify(encParam));\r\n        encParam.fec = {\r\n          ssrc: primarySsrc,\r\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\r\n        };\r\n        encodingParameters.push(encParam);\r\n      }\r\n    }\r\n  });\r\n  if (encodingParameters.length === 0 && primarySsrc) {\r\n    encodingParameters.push({\r\n      ssrc: primarySsrc,\r\n    });\r\n  }\r\n\r\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\r\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\r\n  if (bandwidth.length) {\r\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\r\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\r\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\r\n      // use formula from JSEP to convert b=AS to TIAS value.\r\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\r\n          - (50 * 40 * 8);\r\n    } else {\r\n      bandwidth = undefined;\r\n    }\r\n    encodingParameters.forEach(params => {\r\n      params.maxBitrate = bandwidth;\r\n    });\r\n  }\r\n  return encodingParameters;\r\n};\r\n\r\n// parses http://draft.ortc.org/#rtcrtcpparameters*\r\nSDPUtils.parseRtcpParameters = function(mediaSection) {\r\n  const rtcpParameters = {};\r\n\r\n  // Gets the first SSRC. Note that with RTX there might be multiple\r\n  // SSRCs.\r\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\r\n    .map(line => SDPUtils.parseSsrcMedia(line))\r\n    .filter(obj => obj.attribute === 'cname')[0];\r\n  if (remoteSsrc) {\r\n    rtcpParameters.cname = remoteSsrc.value;\r\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\r\n  }\r\n\r\n  // Edge uses the compound attribute instead of reducedSize\r\n  // compound is !reducedSize\r\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\r\n  rtcpParameters.reducedSize = rsize.length > 0;\r\n  rtcpParameters.compound = rsize.length === 0;\r\n\r\n  // parses the rtcp-mux attrіbute.\r\n  // Note that Edge does not support unmuxed RTCP.\r\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\r\n  rtcpParameters.mux = mux.length > 0;\r\n\r\n  return rtcpParameters;\r\n};\r\n\r\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\r\n  let sdp = '';\r\n  if (rtcpParameters.reducedSize) {\r\n    sdp += 'a=rtcp-rsize\\r\\n';\r\n  }\r\n  if (rtcpParameters.mux) {\r\n    sdp += 'a=rtcp-mux\\r\\n';\r\n  }\r\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\r\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\r\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\r\n  }\r\n  return sdp;\r\n};\r\n\r\n\r\n// parses either a=msid: or a=ssrc:... msid lines and returns\r\n// the id of the MediaStream and MediaStreamTrack.\r\nSDPUtils.parseMsid = function(mediaSection) {\r\n  let parts;\r\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\r\n  if (spec.length === 1) {\r\n    parts = spec[0].substr(7).split(' ');\r\n    return {stream: parts[0], track: parts[1]};\r\n  }\r\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\r\n    .map(line => SDPUtils.parseSsrcMedia(line))\r\n    .filter(msidParts => msidParts.attribute === 'msid');\r\n  if (planB.length > 0) {\r\n    parts = planB[0].value.split(' ');\r\n    return {stream: parts[0], track: parts[1]};\r\n  }\r\n};\r\n\r\n// SCTP\r\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\r\n// to draft-ietf-mmusic-sctp-sdp-05\r\nSDPUtils.parseSctpDescription = function(mediaSection) {\r\n  const mline = SDPUtils.parseMLine(mediaSection);\r\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\r\n  let maxMessageSize;\r\n  if (maxSizeLine.length > 0) {\r\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\r\n  }\r\n  if (isNaN(maxMessageSize)) {\r\n    maxMessageSize = 65536;\r\n  }\r\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\r\n  if (sctpPort.length > 0) {\r\n    return {\r\n      port: parseInt(sctpPort[0].substr(12), 10),\r\n      protocol: mline.fmt,\r\n      maxMessageSize,\r\n    };\r\n  }\r\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\r\n  if (sctpMapLines.length > 0) {\r\n    const parts = sctpMapLines[0]\r\n      .substr(10)\r\n      .split(' ');\r\n    return {\r\n      port: parseInt(parts[0], 10),\r\n      protocol: parts[1],\r\n      maxMessageSize,\r\n    };\r\n  }\r\n};\r\n\r\n// SCTP\r\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\r\n// support by now receiving in this format, unless we originally parsed\r\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\r\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\r\nSDPUtils.writeSctpDescription = function(media, sctp) {\r\n  let output = [];\r\n  if (media.protocol !== 'DTLS/SCTP') {\r\n    output = [\r\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\r\n      'c=IN IP4 0.0.0.0\\r\\n',\r\n      'a=sctp-port:' + sctp.port + '\\r\\n',\r\n    ];\r\n  } else {\r\n    output = [\r\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\r\n      'c=IN IP4 0.0.0.0\\r\\n',\r\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\r\n    ];\r\n  }\r\n  if (sctp.maxMessageSize !== undefined) {\r\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\r\n  }\r\n  return output.join('');\r\n};\r\n\r\n// Generate a session ID for SDP.\r\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\r\n// recommends using a cryptographically random +ve 64-bit value\r\n// but right now this should be acceptable and within the right range\r\nSDPUtils.generateSessionId = function() {\r\n  return Math.random().toString().substr(2, 21);\r\n};\r\n\r\n// Write boiler plate for start of SDP\r\n// sessId argument is optional - if not supplied it will\r\n// be generated randomly\r\n// sessVersion is optional and defaults to 2\r\n// sessUser is optional and defaults to 'thisisadapterortc'\r\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\r\n  let sessionId;\r\n  const version = sessVer !== undefined ? sessVer : 2;\r\n  if (sessId) {\r\n    sessionId = sessId;\r\n  } else {\r\n    sessionId = SDPUtils.generateSessionId();\r\n  }\r\n  const user = sessUser || 'thisisadapterortc';\r\n  // FIXME: sess-id should be an NTP timestamp.\r\n  return 'v=0\\r\\n' +\r\n      'o=' + user + ' ' + sessionId + ' ' + version +\r\n        ' IN IP4 127.0.0.1\\r\\n' +\r\n      's=-\\r\\n' +\r\n      't=0 0\\r\\n';\r\n};\r\n\r\n// Gets the direction from the mediaSection or the sessionpart.\r\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\r\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\r\n  const lines = SDPUtils.splitLines(mediaSection);\r\n  for (let i = 0; i < lines.length; i++) {\r\n    switch (lines[i]) {\r\n      case 'a=sendrecv':\r\n      case 'a=sendonly':\r\n      case 'a=recvonly':\r\n      case 'a=inactive':\r\n        return lines[i].substr(2);\r\n      default:\r\n        // FIXME: What should happen here?\r\n    }\r\n  }\r\n  if (sessionpart) {\r\n    return SDPUtils.getDirection(sessionpart);\r\n  }\r\n  return 'sendrecv';\r\n};\r\n\r\nSDPUtils.getKind = function(mediaSection) {\r\n  const lines = SDPUtils.splitLines(mediaSection);\r\n  const mline = lines[0].split(' ');\r\n  return mline[0].substr(2);\r\n};\r\n\r\nSDPUtils.isRejected = function(mediaSection) {\r\n  return mediaSection.split(' ', 2)[1] === '0';\r\n};\r\n\r\nSDPUtils.parseMLine = function(mediaSection) {\r\n  const lines = SDPUtils.splitLines(mediaSection);\r\n  const parts = lines[0].substr(2).split(' ');\r\n  return {\r\n    kind: parts[0],\r\n    port: parseInt(parts[1], 10),\r\n    protocol: parts[2],\r\n    fmt: parts.slice(3).join(' '),\r\n  };\r\n};\r\n\r\nSDPUtils.parseOLine = function(mediaSection) {\r\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\r\n  const parts = line.substr(2).split(' ');\r\n  return {\r\n    username: parts[0],\r\n    sessionId: parts[1],\r\n    sessionVersion: parseInt(parts[2], 10),\r\n    netType: parts[3],\r\n    addressType: parts[4],\r\n    address: parts[5],\r\n  };\r\n};\r\n\r\n// a very naive interpretation of a valid SDP.\r\nSDPUtils.isValidSDP = function(blob) {\r\n  if (typeof blob !== 'string' || blob.length === 0) {\r\n    return false;\r\n  }\r\n  const lines = SDPUtils.splitLines(blob);\r\n  for (let i = 0; i < lines.length; i++) {\r\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\r\n      return false;\r\n    }\r\n    // TODO: check the modifier a bit more.\r\n  }\r\n  return true;\r\n};\r\n\r\n// Expose public methods.\r\nif (typeof module === 'object') {\r\n  module.exports = SDPUtils;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}